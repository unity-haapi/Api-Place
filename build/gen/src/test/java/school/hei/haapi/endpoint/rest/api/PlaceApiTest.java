/*
 * HEI Admin API
 * _Programmatically connect to a computer programming [school](https://hei.school)._ After [joining us](mailto:contact@hei.school), you can get an identification token from our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami) or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami) authentication service. Then, start playing with our system!  The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api). You are welcome to try and compromise it. Happy hacking! 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package school.hei.haapi.endpoint.rest.api;

import school.hei.haapi.endpoint.rest.client.ApiException;
import school.hei.haapi.endpoint.rest.model.BadRequestException;
import school.hei.haapi.endpoint.rest.model.CreateEvent;
import school.hei.haapi.endpoint.rest.model.CreateEventParticipant;
import school.hei.haapi.endpoint.rest.model.CreatePlace;
import school.hei.haapi.endpoint.rest.model.Event;
import school.hei.haapi.endpoint.rest.model.EventParticipant;
import school.hei.haapi.endpoint.rest.model.InternalServerException;
import school.hei.haapi.endpoint.rest.model.NotAuthorizedException;
import school.hei.haapi.endpoint.rest.model.Place;
import school.hei.haapi.endpoint.rest.model.ResourceNotFoundException;
import school.hei.haapi.endpoint.rest.model.TooManyRequestsException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for PlaceApi
 */
@Ignore
public class PlaceApiTest {

    private final PlaceApi api = new PlaceApi();

    
    /**
     * Add new place
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNewPlaceTest() throws ApiException {
        List<CreatePlace> createPlace = null;
        List<Place> response = 
        api.addNewPlace(createPlace);
        
        // TODO: test validations
    }
    
    /**
     * Create eventParticipant
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEventParticipantTest() throws ApiException {
        String eventId = null;
        List<CreateEventParticipant> createEventParticipant = null;
        List<EventParticipant> response = 
        api.createEventParticipant(eventId, createEventParticipant);
        
        // TODO: test validations
    }
    
    /**
     * Create new or update existing events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOrupdateEventsTest() throws ApiException {
        List<CreateEvent> createEvent = null;
        List<Event> response = 
        api.createOrupdateEvents(createEvent);
        
        // TODO: test validations
    }
    
    /**
     * Delete event by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEventTest() throws ApiException {
        String id = null;
        
        api.deleteEvent(id);
        
        // TODO: test validations
    }
    
    /**
     * Get event by identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        String id = null;
        List<Event> response = 
        api.getEventById(id);
        
        // TODO: test validations
    }
    
    /**
     * Get all events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        List<Event> response = 
        api.getEvents();
        
        // TODO: test validations
    }
    
    /**
     * Get all participants of a specific event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantsTest() throws ApiException {
        String eventId = null;
        Integer page = null;
        Integer pageSize = null;
        List<EventParticipant> response = 
        api.getParticipants(eventId, page, pageSize);
        
        // TODO: test validations
    }
    
    /**
     * Get all places
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlacesTest() throws ApiException {
        List<Place> response = 
        api.getPlaces();
        
        // TODO: test validations
    }
    
}
